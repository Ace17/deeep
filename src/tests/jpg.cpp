// Copyright (C) 2021 - Sebastien Alaiwan
// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU Affero General Public License as
// published by the Free Software Foundation, either version 3 of the
// License, or (at your option) any later version.

#include "render/jpg.h"
#include "tests.h"
#include <vector>

unittest("JPG: simple")
{
  static const uint8_t input[] =
  {
    0xff, 0xd8, 0xff, 0xe0, 0x00, 0x10, 0x4a, 0x46, 0x49, 0x46, 0x00, 0x01,
    0x02, 0x00, 0x00, 0x48, 0x00, 0x48, 0x00, 0x00, 0xff, 0xfe, 0x00, 0x0f,
    0x4c, 0x61, 0x76, 0x63, 0x36, 0x31, 0x2e, 0x33, 0x2e, 0x31, 0x30, 0x30,
    0x00, 0xff, 0xdb, 0x00, 0x43, 0x00, 0x08, 0x04, 0x04, 0x04, 0x04, 0x04,
    0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x06, 0x06, 0x06, 0x06, 0x06, 0x06,
    0x06, 0x06, 0x06, 0x06, 0x06, 0x06, 0x06, 0x07, 0x07, 0x07, 0x08, 0x08,
    0x08, 0x07, 0x07, 0x07, 0x06, 0x06, 0x07, 0x07, 0x08, 0x08, 0x08, 0x08,
    0x09, 0x09, 0x09, 0x08, 0x08, 0x08, 0x08, 0x09, 0x09, 0x0a, 0x0a, 0x0a,
    0x0c, 0x0c, 0x0b, 0x0b, 0x0e, 0x0e, 0x0e, 0x11, 0x11, 0x14, 0xff, 0xc4,
    0x00, 0x80, 0x00, 0x01, 0x00, 0x02, 0x03, 0x01, 0x01, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x06, 0x05, 0x04,
    0x02, 0x08, 0x07, 0x01, 0x01, 0x01, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x01, 0x05, 0x10,
    0x00, 0x01, 0x03, 0x03, 0x01, 0x04, 0x08, 0x07, 0x01, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x02, 0x01, 0x03, 0x04, 0x05, 0x00, 0x11, 0x12,
    0x06, 0x55, 0x07, 0x41, 0xa4, 0x94, 0x21, 0xd5, 0x18, 0x13, 0x17, 0xd4,
    0xb5, 0xb2, 0x82, 0x76, 0x22, 0x37, 0x34, 0x51, 0x11, 0x00, 0x01, 0x03,
    0x04, 0x00, 0x07, 0x00, 0x03, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x01, 0x11, 0x03, 0x02, 0x12, 0x00, 0x05, 0x04, 0x31, 0x55, 0x41,
    0x21, 0x13, 0xd3, 0x94, 0x71, 0x15, 0x16, 0x06, 0xff, 0xc0, 0x00, 0x11,
    0x08, 0x00, 0x17, 0x00, 0x11, 0x03, 0x01, 0x22, 0x00, 0x02, 0x11, 0x00,
    0x03, 0x11, 0x00, 0xff, 0xda, 0x00, 0x0c, 0x03, 0x01, 0x00, 0x02, 0x11,
    0x03, 0x11, 0x00, 0x3f, 0x00, 0xf8, 0x24, 0xc9, 0x92, 0x67, 0xc9, 0x39,
    0x32, 0x4f, 0xcc, 0x74, 0xf4, 0xea, 0x2d, 0x22, 0x39, 0xd2, 0x28, 0x29,
    0xf8, 0x80, 0x88, 0xa6, 0x11, 0x11, 0x3b, 0x11, 0x2d, 0x0a, 0x64, 0x8a,
    0x7c, 0xc8, 0xd3, 0x63, 0x1f, 0x94, 0xfc, 0x67, 0x9a, 0x90, 0xc1, 0xe9,
    0x12, 0xd0, 0xeb, 0x46, 0x86, 0x05, 0xa4, 0xc4, 0x84, 0xb4, 0x92, 0x22,
    0xe0, 0x85, 0x45, 0x79, 0xa5, 0xc5, 0x6b, 0x9e, 0x38, 0x51, 0xe3, 0xa4,
    0x50, 0x94, 0x52, 0x82, 0x8a, 0x51, 0x29, 0x4e, 0x08, 0x9d, 0x93, 0x82,
    0x76, 0xbb, 0xb1, 0x39, 0xed, 0xcd, 0xd9, 0xec, 0x48, 0xbf, 0x27, 0x8c,
    0xa6, 0xec, 0x9d, 0x25, 0xc9, 0x3b, 0x29, 0x92, 0x66, 0x66, 0x66, 0xa6,
    0x66, 0x64, 0x93, 0x23, 0x25, 0x24, 0x92, 0xb7, 0x66, 0xf5, 0x83, 0x88,
    0xbb, 0xef, 0xa0, 0x53, 0x3d, 0x95, 0xbd, 0x60, 0xe2, 0x2e, 0xfb, 0xe8,
    0x14, 0xcf, 0x65, 0x75, 0x9b, 0x59, 0x7f, 0x45, 0x84, 0xe5, 0x78, 0xff,
    0x00, 0x93, 0x5f, 0xd7, 0x61, 0xfe, 0x6b, 0xfc, 0xe7, 0x26, 0xc5, 0xfc,
    0x1a, 0xde, 0xab, 0xed, 0xf6, 0x4a, 0x3b, 0xa4, 0xd9, 0x2a, 0x2a, 0x8e,
    0x33, 0x8c, 0xe3, 0xb5, 0x33, 0xcd, 0x11, 0x79, 0xff, 0x00, 0x97, 0xb5,
    0xb3, 0xd4, 0x49, 0x7b, 0x4b, 0x5f, 0xa4, 0xd1, 0x22, 0x1b, 0x2d, 0xc9,
    0xaa, 0xd4, 0x21, 0x53, 0x63, 0x9b, 0xe4, 0x62, 0xc0, 0x3d, 0x31, 0xf0,
    0x61, 0xb2, 0x74, 0x9b, 0x6d, 0xc3, 0x46, 0xd0, 0xcd, 0x14, 0xd4, 0x40,
    0xc9, 0x13, 0x38, 0x15, 0x5b, 0x86, 0xa5, 0xfd, 0xae, 0xfd, 0x3f, 0x20,
    0xde, 0x6b, 0x84, 0xff, 0x00, 0xb4, 0xb6, 0x13, 0xee, 0xbd, 0x9d, 0xf8,
    0xa3, 0x17, 0xad, 0x9d, 0xd3, 0x67, 0x1f, 0x9c, 0xca, 0x69, 0xb0, 0x08,
    0x6b, 0x5b, 0x7b, 0x6d, 0x86, 0x81, 0x2a, 0x68, 0x69, 0xf9, 0x42, 0x2a,
    0x7a, 0x94, 0x01, 0x4f, 0x5b, 0x63, 0x44, 0xc9, 0xb8, 0x13, 0xc6, 0x50,
    0x53, 0xf9, 0xed, 0x77, 0xff, 0x00, 0x05, 0x5c, 0x53, 0xdf, 0x1b, 0x19,
    0xd7, 0xaa, 0xfd, 0xc7, 0x6f, 0x05, 0x5c, 0x53, 0xdf, 0x1b, 0x19, 0xd7,
    0xaa, 0xfd, 0xc7, 0x7e, 0x9f, 0xb5, 0x92, 0xed, 0xff, 0x00, 0xff, 0xd9
  };

  auto const bpp = 4;
  auto const W = 17;
  auto const H = 23;

  int width = 0, height = 0;
  auto pic = decodeJpg(input, width, height);
  assertEquals(W, width);
  assertEquals(H, height);

  // top-left is red
  assertEquals(242, (int)pic[bpp * 0 + 0]);
  assertEquals(0x00, (int)pic[bpp * 0 + 1]);
  assertEquals(0x00, (int)pic[bpp * 0 + 2]);
  assertEquals(0xFF, (int)pic[bpp * 0 + 3]);

  // top-right is green
  assertEquals(0x01, (int)pic[bpp * (W - 1) + 0]);
  assertEquals(0xFF, (int)pic[bpp * (W - 1) + 1]);
  assertEquals(0x01, (int)pic[bpp * (W - 1) + 2]);
  assertEquals(0xFF, (int)pic[bpp * (W - 1) + 3]);

  // bottom-left is blue
  assertEquals(0x03, (int)pic[bpp * W * (H - 1) + 0]);
  assertEquals(0x00, (int)pic[bpp * W * (H - 1) + 1]);
  assertEquals(234, (int)pic[bpp * W * (H - 1) + 2]);
  assertEquals(0xFF, (int)pic[bpp * W * (H - 1) + 3]);

  // bottom-right is white
  assertEquals(0xFF, (int)pic[bpp * (W * H - 1) + 0]);
  assertEquals(0xFF, (int)pic[bpp * (W * H - 1) + 1]);
  assertEquals(0xFF, (int)pic[bpp * (W * H - 1) + 2]);
  assertEquals(0xFF, (int)pic[bpp * (W * H - 1) + 3]);
}

